package main

import (
	"log"

	. "github.com/dave/jennifer/jen"
)

func declareShapesFunc(min, max []int, data [][][]int) func(g *Group) {
	return func(g *Group) {
		for i := 0; i < len(data); i++ {
			g.Line().Values(
				Line().Id("minValue").Op(":").Lit(min[i]),
				Line().Id("maxValue").Op(":").Lit(max[i]),
				Line().Id("values").Op(":").Index().Index().Int().ValuesFunc(func(g1 *Group) {
					for _, row := range data[i] {
						g1.Line().ValuesFunc(func(g2 *Group) {
							for _, v := range row {
								g2.Lit(v)
							}
						})
					}
				}),
				Line(),
			)
		}
	}
}

func Generate() {
	f := NewFile("main") // TODO: shapes

	f.HeaderComment("This file is generated by cmd/shapegen/main.go")

	f.Type().Id("Shape").Struct(
		List(Id("maxValue"), Id("minValue")).Int(),
		Id("values").Index().Index().Int(),
	)

	// Shapes 16
	f.Var().Id("shapes16").Op("=").Index().Id("Shape").ValuesFunc(
		declareShapesFunc(x16min, x16max, x16),
	)

	err := f.Save("shapes.go")
	if err != nil {
		log.Fatal(err)
	}
}
